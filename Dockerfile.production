# Logan Security Dashboard - Production Docker Image
# Multi-stage build for optimal image size and security

# =============================================================================
# Base Image with System Dependencies
# =============================================================================
FROM node:20-alpine AS base

# Install system dependencies and security updates
RUN apk update && apk upgrade && \
    apk add --no-cache \
    libc6-compat \
    python3 \
    py3-pip \
    python3-dev \
    build-base \
    openssl \
    ca-certificates \
    curl \
    git \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup --system --gid 1001 logan && \
    adduser --system --uid 1001 --ingroup logan logan

# Set working directory
WORKDIR /app

# =============================================================================
# Python Dependencies Layer
# =============================================================================
FROM base AS python-deps

# Copy Python requirements
COPY scripts/requirements.txt ./python-requirements.txt

# Install Python dependencies
RUN pip3 install --no-cache-dir --upgrade pip && \
    pip3 install --no-cache-dir -r python-requirements.txt

# =============================================================================
# Node.js Dependencies Layer
# =============================================================================
FROM base AS node-deps

# Copy package files
COPY package.json package-lock.json* ./

# Install Node.js dependencies
RUN npm ci --only=production --frozen-lockfile && \
    npm cache clean --force

# =============================================================================
# Build Layer
# =============================================================================
FROM base AS builder

# Copy Python dependencies from python-deps layer
COPY --from=python-deps /usr/lib/python3.*/site-packages /usr/lib/python3.11/site-packages
COPY --from=python-deps /usr/bin/pip* /usr/bin/

# Copy Node.js dependencies
COPY --from=node-deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Copy Python scripts
COPY scripts/ ./scripts/

# Set build environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PYTHON_PATH=/usr/bin/python3

# Build the application
RUN npm run build

# =============================================================================
# Runtime Layer
# =============================================================================
FROM base AS runtime

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PYTHON_PATH=/usr/bin/python3

# Copy Python dependencies
COPY --from=python-deps /usr/lib/python3.*/site-packages /usr/lib/python3.11/site-packages
COPY --from=python-deps /usr/bin/pip* /usr/bin/

# Copy Node.js runtime dependencies
COPY --from=node-deps /app/node_modules ./node_modules

# Copy built application
COPY --from=builder --chown=logan:logan /app/.next/standalone ./
COPY --from=builder --chown=logan:logan /app/.next/static ./.next/static
COPY --from=builder --chown=logan:logan /app/public ./public

# Copy Python scripts and configurations
COPY --from=builder --chown=logan:logan /app/scripts ./scripts

# Copy configuration files
COPY --from=builder --chown=logan:logan /app/config ./config

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/temp /app/uploads && \
    chown -R logan:logan /app/logs /app/temp /app/uploads && \
    chmod 755 /app/logs /app/temp /app/uploads

# Create health check script
RUN echo '#!/bin/sh\ncurl -f http://localhost:3000/api/health || exit 1' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh && \
    chown logan:logan /app/healthcheck.sh

# Switch to non-root user
USER logan

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /app/healthcheck.sh

# Set hostname binding
ENV HOSTNAME="0.0.0.0"
ENV PORT=3000

# Start the application
CMD ["node", "server.js"]